{\rtf1\ansi\deff0\n\b Informe de interfaces - Proyecto Mascotas CRUD \b0\line\line\nEste documento explica cada interfaz (endpoints y vistas) del proyecto.\line\line\n\b Estructura de la base de datos \b0\line- Tabla: mascotas (id INT AUTO_INCREMENT PK, nombre VARCHAR(100), edad SMALLINT)\line\line\b Endpoints API (JSON) \b0\line1) GET /api/mascotas\line   - Descripción: Devuelve lista de todas las mascotas.\line   - Respuesta: Array de objetos [{id, nombre, edad}].\line\line2) GET /api/mascotas/:id\line   - Descripción: Devuelve una mascota por id.\line   - Respuesta: Objeto {id, nombre, edad} o 404 si no existe.\line\line3) POST /api/mascotas\line   - Descripción: Crea una mascota nueva.\line   - Body JSON: { nombre: string, edad: number }.\line   - Respuesta: 201 y objeto creado.\line\line4) PUT /api/mascotas/:id\line   - Descripción: Actualiza los datos de una mascota.\line   - Body JSON: { nombre, edad }.\line   - Respuesta: Objeto actualizado o 404.\line\line5) DELETE /api/mascotas/:id\line   - Descripción: Elimina la mascota indicada.\line   - Respuesta: Mensaje de confirmación.\line\line\b Vistas (EJS) \b0\line- / (index): Lista todas las mascotas y muestra botones para editar/eliminar.\line- /nueva: Formulario para crear una mascota.\line- /editar/:id: Formulario para editar (prefill) una mascota existente.\line\line\b Uso con Postman \b0\line- Importar el archivo postman_collection.json en Postman.\line- Probar GET, POST, PUT, DELETE.\line\line\b Consideraciones adicionales \b0\line- Asegúrese de crear la base de datos y tabla antes de ejecutar.\line- Añadir autenticación y validaciones para producción.\line\line\line\par}